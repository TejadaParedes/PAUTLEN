segment .data
	_errordivision db "****Error de ejecucion: Division por cero.", 0
	_error_indice_vector db "****Error de ejecucion: Indice fuera de rango.", 0
segment .bss
	__esp resd 1
;D:	main
;D:	{
;D:	int
;R10:	<tipo> ::= int
;R9:	<clase_escalar> ::= <tipo>
;R5:	<clase> ::= <clase_escalar>
;D:	x
	_x resd 1
;R108:	<identificador> ::= TOK_IDENTIFICADOR
;D:	,
;D:	y
	_y resd 1
;R108:	<identificador> ::= TOK_IDENTIFICADOR
;D:	;
;R18:	<identificadores> ::= <identificador>
;R19:	<identificadores> ::= <identificador> , <identificadores>
;R4:	<declaracion> ::= <clase> <identificadores> ;
;D:	scanf
;R2:	<declaraciones> ::= <declaracion>
segment .text
	global main
	extern print_int, print_boolean, print_string,  print_blank, print_endofline, scan_int, scan_boolean
;R21:	<funciones> ::=
main:
	mov dword [__esp], esp
;D:	x
	push dword _x
	call scan_int
	add esp, 4
;R54:	<lectura> ::= scanf <identificador>
;R35:	<sentencia_simple> ::= <lectura>
;D:	;
;R32:	<sentencia> ::= <sentencia_simple> ;
;D:	y
;D:	=
;D:	x
;D:	+
	push dword _x
;R80:	<exp> ::= <identificador>
;D:	1
;R104:	<constante_entera> ::= TOK_CONSTANTE_ENTERA
;R100:	<constante> ::= <constante_entera>
	push dword x
;R81:	<exp> ::= <constante>
;D:	;
	pop dword edx
	pop dword eax
	mov dword eax, [eax]
	add eax, edx
	push dword eax
;R72:	<exp> ::= <exp> + <exp>
	pop dword eax
	mov dword [_y], eax
;R43:	<asignacion> ::= <identificador> = <exp>
;R34:	<sentencia_simple> ::= <asignacion>
;R32:	<sentencia> ::= <sentencia_simple> ;
;D:	printf
;D:	y
;D:	;
	push dword _y
;R80:	<exp> ::= <identificador>
	pop dword eax
	push dword eax
	call print_int
	add esp, 4
	call print_endofline
;R56:	<escritura> ::= printf <exp>
;R36:	<sentencia_simple> ::= <escritura>
;R32:	<sentencia> ::= <sentencia_simple> ;
;D:	}
;R30:	<sentencias> ::= <sentencia>
;R31:	<sentencias> ::= <sentencia> <sentencias>
;R31:	<sentencias> ::= <sentencia> <sentencias>
;R1:	<programa> ::= main { <declaraciones> <funciones> <sentencias> }
	jmp near exit
error_division:
	push dword _errordivision
	call print_string
	add esp, 4
	call print_endofline
	jmp near exit
error_indice_vector:
	push dword _error_indice_vector
	call print_string
	add esp, 4
	call print_endofline
	jmp near exit
exit:
	mov dword esp, [__esp]
	ret
